{
    "pipes": [],
    "interfaces": [
        {
            "name": "CartState",
            "id": "interface-CartState-6112974ae4ff223b4fcfecb1e8597aca",
            "file": "src/app/components/common/cart/state/cart-action.ts",
            "type": "interface",
            "sourceCode": "import { Action, createAction, props } from '@ngrx/store';\r\nimport { ItemCardModel } from 'src/app/components/item/item-card/item-card.model';\r\n\r\nexport interface CartState {\r\n  allItems: ItemCardModel[]\r\n}\r\n\r\nexport enum CART_ACTIONS {\r\n  ADD_TO_CART = '[Add item] Add',\r\n  GET_ITEMS = '[Get item] Get'\r\n}\r\n\r\nexport const AddToCart = createAction(\r\n  CART_ACTIONS.ADD_TO_CART,\r\n  props<{ item: ItemCardModel }>()\r\n);\r\n\r\nexport const DeleteItem = createAction(\r\n  CART_ACTIONS.GET_ITEMS,\r\n  props<{ id: number }>()\r\n);\r\n",
            "properties": [
                {
                    "name": "allItems",
                    "type": "ItemCardModel[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "CartService",
            "id": "injectable-CartService-885cac918df1c7304aa1f0fff15fba75",
            "file": "src/app/services/cart.service.ts",
            "properties": [
                {
                    "name": "cartVisible",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [
                {
                    "name": "closeCart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                },
                {
                    "name": "getCartVisibilityStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 12
                },
                {
                    "name": "toggleCartVisibilityStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n\n  cartVisible = false;\n\n  constructor() {}\n\n  getCartVisibilityStatus() {\n    return this.cartVisible;\n  }\n\n  toggleCartVisibilityStatus() {\n    this.cartVisible = !this.cartVisible;\n  }\n\n  closeCart() {\n    this.cartVisible = false;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "type": "injectable"
        },
        {
            "name": "CommonDbService",
            "id": "injectable-CommonDbService-50be918064642255824cd35144a37614",
            "file": "src/app/services/common-db.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "\"http://localhost:3000/\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getAllItems",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 13
                },
                {
                    "name": "getSpecificItem",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CommonDbService {\r\n\r\n  private baseUrl = \"http://localhost:3000/\"\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getAllItems() {\r\n    const url = this.baseUrl + \"items\";\r\n    return this.http.get(url);\r\n  }\r\n\r\n  getSpecificItem(id: string) {\r\n    const url = this.baseUrl + `items/${id}`;\r\n    return this.http.get(url);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LocalServiceService",
            "id": "injectable-LocalServiceService-514a08e54da86b0a23fe97bffab982df",
            "file": "src/app/services/local-service.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getCurrencyText",
                    "args": [
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLocalText",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 28,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport i18next from 'i18next';\r\nimport localization from '../../assets/localization-en.json';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class LocalServiceService {\r\n  constructor() {\r\n    i18next.init(\r\n      {\r\n        lng: 'en',\r\n        debug: true,\r\n        resources: {\r\n          en: {\r\n            translation: localization,\r\n          },\r\n        },\r\n      },\r\n      function (err, t) {\r\n        // initialized and ready to go!\r\n        // document.getElementById('output').innerHTML = i18next.t('key');\r\n        console.log(i18next);\r\n      }\r\n    );\r\n  }\r\n\r\n  getLocalText(key?: string) {\r\n    return key !== undefined ? i18next.t(key) : '';\r\n  }\r\n\r\n  getCurrencyText(value): string {\r\n    return '$' + value;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-b0dda38f970a6690b77b35dfb293b3ac",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\r\n\r\nexport class AppPage {\r\n  navigateTo(): Promise<unknown> {\r\n    return browser.get(browser.baseUrl) as Promise<unknown>;\r\n  }\r\n\r\n  getTitleText(): Promise<string> {\r\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ItemCardModel",
            "id": "class-ItemCardModel-41f37bd88dc39b5fd8836de6062cecdf",
            "file": "src/app/components/item/item-card/item-card.model.ts",
            "type": "class",
            "sourceCode": "export class ItemCardModel {\r\n    public id: number = null;\r\n    public name: string = \"\";\r\n    public description: string = \"\";\r\n    public imgUrl: string = \"\";\r\n    public price: string = \"\";\r\n    public cartView: boolean = false;\r\n}",
            "properties": [
                {
                    "name": "cartView",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "description",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "id",
                    "defaultValue": "null",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "imgUrl",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "name",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "price",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ToggleButtonElement",
            "id": "class-ToggleButtonElement-1f7e15a93591d2b8c01350144b29a232",
            "file": "src/app/elements/toggle-button/toggle-button.ts",
            "type": "class",
            "sourceCode": "import { LitElement, html, customElement } from 'lit-element';\r\n\r\n@customElement('custom-toggle')\r\nexport class ToggleButtonElement extends LitElement {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    render() {\r\n        return html`<input type=\"checkbox\"> Dark`\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 4
            },
            "properties": [],
            "methods": [
                {
                    "name": "render",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "extends": "LitElement"
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-3237ff925660f4b49977ad146bacf7d2",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "isCartVisible",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { CartService } from './services/cart.service';\r\ndeclare var $: any;\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n  constructor(private cartService: CartService) {\r\n  }\r\n\r\n  isCartVisible() {\r\n    return this.cartService.getCartVisibilityStatus();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".column-view {\r\n  display: grid;\r\n  grid-template-columns: auto;\r\n\r\n  &.two-column-view {\r\n    grid-template-columns: auto 350px;\r\n  }\r\n}\r\n\r\n@media screen and (max-width: 1024px) {\r\n  .column-view {\r\n    &.two-column-view {\r\n      grid-template-columns: auto 220px;\r\n    }\r\n  }\r\n}",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "cartService",
                        "type": "CartService"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "cartService",
                        "type": "CartService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"column-view\" [ngClass]=\"{'two-column-view': isCartVisible()}\">\r\n  <div class=\"column\">\r\n    <app-header></app-header>\r\n    <router-outlet></router-outlet>\r\n  </div>\r\n  <div class=\"column\" *ngIf=\"isCartVisible()\">\r\n    <app-cart></app-cart>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "CartComponent",
            "id": "component-CartComponent-7e654189f1ef2d0bfdecc48cfd471ecd",
            "file": "src/app/components/common/cart/cart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-cart",
            "styleUrls": [
                "./cart.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./cart.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cartItems",
                    "defaultValue": "[]",
                    "type": "ItemCardModel[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "showTotal",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "closeCart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                },
                {
                    "name": "getTotalCartPrice",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 40
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, AfterViewInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { CartService } from 'src/app/services/cart.service';\nimport { CommonDbService } from 'src/app/services/common-db.service';\nimport { ItemCardModel } from '../../item/item-card/item-card.model';\nimport { CartState } from './state/cart-action';\n\n@Component({\n  selector: 'app-cart',\n  templateUrl: './cart.component.html',\n  styleUrls: ['./cart.component.scss']\n})\nexport class CartComponent implements OnInit {\n\n  cartItems: ItemCardModel[] = [];\n  showTotal = false;\n\n  constructor(\n    private cartService: CartService,\n    private dbService: CommonDbService,\n    private store: Store<CartState>\n  ) { }\n\n  ngOnInit(): void {\n  }\n\n  ngAfterViewInit() {\n    this.showTotal = true;\n    this.store.select(state => state.allItems).subscribe((data: any) => {\n      this.cartItems = data.allItems.map((elem) => {\n        return { ...elem, cartView: true };\n      });;\n    });\n  }\n\n  closeCart() {\n    this.cartService.closeCart();\n  }\n\n  getTotalCartPrice() {\n    return this.cartItems.length ? this.cartItems.map((e) => { return Number(e.price) })\n      .reduce((e, n) => e + n) : 0\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".cart-container {\r\n  width: 350px;\r\n  position: fixed;\r\n  height: 100vh;\r\n  right: 0;\r\n  padding: 10px;\r\n  box-sizing: border-box;\r\n  box-shadow: -1px 0px 4px 1px #333;\r\n\r\n  .cart-title-container {\r\n    margin-bottom: 10px;\r\n  }\r\n\r\n  .cart-items-list {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 10px;\r\n  }\r\n\r\n  .cart-total-container {\r\n    position: absolute;\r\n    bottom: 10px;\r\n    border-top: 1px solid;\r\n    padding: 10px 0;\r\n    width: calc(100% - 20px);\r\n\r\n    .total-price-label {\r\n      font-size: 20px;\r\n    }\r\n\r\n    .total-price-value {\r\n      font-size: 22px;\r\n      font-weight: 700;\r\n    }\r\n  }\r\n\r\n  .cart-toolbar {\r\n    position: absolute;\r\n    top: 8px;\r\n    right: 5px;\r\n\r\n    .close-cart {\r\n      background-color: transparent;\r\n      border: none;\r\n      outline: none;\r\n      font-size: 20px;\r\n      padding: 0;\r\n      line-height: 20px;\r\n      cursor: pointer;\r\n    }\r\n  }\r\n}\r\n\r\n@media screen and (max-width: 1024px) {\r\n  .cart-container {\r\n    width: 220px;\r\n  }\r\n}",
                    "styleUrl": "./cart.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "cartService",
                        "type": "CartService"
                    },
                    {
                        "name": "dbService",
                        "type": "CommonDbService"
                    },
                    {
                        "name": "store",
                        "type": "Store<CartState>"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "cartService",
                        "type": "CartService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dbService",
                        "type": "CommonDbService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<CartState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"cart-container\">\n    <div class=\"cart-title-container\">Items in Cart</div>\n    <div class=\"cart-items-list\">\n        <app-item-card [item]=\"item\" *ngFor=\"let item of cartItems\"></app-item-card>\n    </div>\n    <div *ngIf=\"showTotal\" class=\"cart-total-container\">\n        <span class=\"total-price-label\">Total Price: </span>\n        <span class=\"total-price-value\">{{getTotalCartPrice()}}</span>\n    </div>\n    <div class=\"cart-toolbar\">\n        <button (click)=\"closeCart()\" class=\"close-cart\">✕</button>\n    </div>\n</div>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-0153cc34366ed7edaa7889d0b5c4686f",
            "file": "src/app/components/common/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "showMenu",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "hideHamMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                },
                {
                    "name": "openCart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, AfterViewInit } from '@angular/core';\nimport { CartService } from 'src/app/services/cart.service';\nimport { ToggleButtonElement } from './../../../elements/toggle-button/toggle-button'\n\nconsole.assert(ToggleButtonElement !== undefined);\n\ndeclare var $: any;\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent implements OnInit {\n  \n  showMenu = false;\n\n  constructor(private cartService: CartService) { }\n\n  ngOnInit(): void {\n  }\n\n  ngAfterViewInit() {\n    document.addEventListener('click', (event: any)=>{\n      if(!$(event.target).closest('.theme-toggle-container').length) {\n        this.hideHamMenu();\n      }\n    })\n  }\n\n  hideHamMenu() {\n    this.showMenu = false;\n  }\n\n  openCart() {\n    this.cartService.toggleCartVisibilityStatus();\n    this.hideHamMenu();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".header-container {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 10px;\r\n  border-bottom: 3px solid #333;\r\n\r\n  h1 {\r\n    margin: 0;\r\n  }\r\n\r\n  .theme-toggle-container {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    gap: 10px;\r\n    position: relative;\r\n\r\n    .ham-menu-button {\r\n      text-align: center;\r\n      font-size: 22px;\r\n      line-height: 22px;\r\n      background: white;\r\n      border: none;\r\n      cursor: pointer;\r\n      outline: none;\r\n    }\r\n\r\n    .ham-menu-list {\r\n      position: absolute;\r\n      background-color: white;\r\n      top: calc(100% + 10px);\r\n      right: 5px;\r\n      padding: 10px;\r\n      border: 1px solid;\r\n      display: flex;\r\n\r\n      :before {\r\n        content: \"\";\r\n        position: absolute;\r\n        top: -20px;\r\n        right: 0;\r\n        border-width: 10px;\r\n        border-style: solid;\r\n        border-color: transparent transparent #333 transparent;\r\n      }\r\n\r\n      .ham-menu-item {\r\n        padding: 5px 10px;\r\n        box-sizing: border-box;\r\n        cursor: pointer;\r\n        background: transparent;\r\n        border: none;\r\n        outline: none;\r\n        border-bottom: 1px solid transparent;\r\n      }\r\n\r\n      .ham-menu-item:hover {\r\n        border-bottom: 1px solid #333;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "cartService",
                        "type": "CartService"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "cartService",
                        "type": "CartService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"header-container\">\n  <div class=\"title-container\">\n    <h1>E-mart</h1>\n  </div>\n  <div class=\"theme-toggle-container\">\n    <custom-toggle></custom-toggle>\n    <button (click)=\"showMenu = !showMenu\" class=\"ham-menu-button\">☰</button>\n    <div *ngIf=\"showMenu\" class=\"ham-menu-list\">\n      <button (click)='openCart()' class=\"ham-menu-item\">Cart</button>\n      <button class=\"ham-menu-item\">Profile</button>\n      <button class=\"ham-menu-item\">Logout</button>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "ItemCardComponent",
            "id": "component-ItemCardComponent-e6d47491c67cba1f0fa234496b958c6c",
            "file": "src/app/components/item/item-card/item-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-item-card",
            "styleUrls": [
                "./item-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./item-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "item",
                    "line": 15,
                    "type": "ItemCardModel"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "locService",
                    "type": "LocalServiceService",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "openItemDetails",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                },
                {
                    "name": "removeFromCart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, AfterViewInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { LocalServiceService } from '../../../services/local-service.service';\r\nimport { AddToCart, CartState, DeleteItem } from '../../common/cart/state/cart-action';\r\nimport { ItemCardModel } from './item-card.model';\r\n\r\n@Component({\r\n  selector: 'app-item-card',\r\n  templateUrl: './item-card.component.html',\r\n  styleUrls: ['./item-card.component.scss']\r\n})\r\nexport class ItemCardComponent implements OnInit {\r\n\r\n  @Input() item: ItemCardModel;\r\n\r\n  constructor(\r\n    public locService: LocalServiceService,\r\n    private router: Router,\r\n    private store: Store<CartState>\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    // const temp = this.locService.getLocalText('test-1');\r\n  }\r\n\r\n  openItemDetails() {\r\n    this.router.navigateByUrl(`item/${this.item.id}`);\r\n  }\r\n\r\n  removeFromCart() {\r\n    this.store.dispatch(DeleteItem({ id: this.item.id }));\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".item-card {\r\n  padding: 10px;\r\n  border: 1px solid;\r\n\r\n  .item-img-container {\r\n\r\n    .item-img {\r\n      width: 100%;\r\n    }\r\n  }\r\n\r\n  .item-details {\r\n    .item-description {\r\n      font-size: 12px;\r\n      color: #666666;\r\n    }\r\n\r\n    &>* {\r\n      margin-bottom: 8px;\r\n    }\r\n  }\r\n\r\n  &.cart-view-item {\r\n    display: grid;\r\n    grid-template-columns: 50px auto 12px;\r\n    gap: 8px;\r\n\r\n    .item-details {\r\n      .item-title {\r\n        font-size: 12px;\r\n      }\r\n\r\n      .item-price {\r\n        font-size: 11px;\r\n        font-weight: 700;\r\n      }\r\n    }\r\n\r\n    .cart-delete-container {\r\n      .cart-del-btn {\r\n        background: transparent;\r\n        border: none;\r\n        outline: none;\r\n        padding: 0;\r\n        cursor: pointer;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./item-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "locService",
                        "type": "LocalServiceService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "store",
                        "type": "Store<CartState>"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "locService",
                        "type": "LocalServiceService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<CartState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"item-card\" (click)=\"openItemDetails()\" [ngClass]=\"{'cart-view-item': item.cartView}\">\r\n  <div class=\"item-img-container\">\r\n    <img class=\"item-img\" src=\"{{ item.imgUrl }}\" alt=\"{{ item.name }}\" />\r\n  </div>\r\n  <div class=\"item-details\">\r\n    <div class=\"item-title\">\r\n      <span>{{ item.name }}</span>\r\n    </div>\r\n    <div *ngIf=\"!item.cartView\" class=\"item-description\">\r\n      <span>{{ item.description }}</span>\r\n    </div>\r\n    <div class=\"item-price\">\r\n      <span>{{ locService.getCurrencyText(item.price) }}</span>\r\n    </div>\r\n  </div>\r\n  <div class=\"cart-delete-container\">\r\n    <button (click)=\"removeFromCart()\" class=\"cart-del-btn\">✖</button>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ItemDetailsComponent",
            "id": "component-ItemDetailsComponent-39d9dc18d0d33007a7c359b1ccd52db6",
            "file": "src/app/components/item/item-details/item-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-item-details",
            "styleUrls": [
                "./item-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./item-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "item",
                    "defaultValue": "{\n    \"id\": 0,\n    \"name\": \"Gorgeous Soft Computer\",\n    \"description\": \"Andy shoes are designed to keeping in mind durability as well as trends, the most stylish range of shoes & sandals\",\n    \"imgUrl\": \"http://placeimg.com/640/480/abstract\",\n    \"price\": \"795.00\",\n    \"cartView\": false\n  }",
                    "line": 17,
                    "type": "ItemCardModel"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "itemId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "locService",
                    "type": "LocalServiceService",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "additemToCart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38
                },
                {
                    "name": "redirectToListing",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { CommonDbService } from 'src/app/services/common-db.service';\nimport { LocalServiceService } from 'src/app/services/local-service.service';\nimport { AddToCart, CartState } from '../../common/cart/state/cart-action';\nimport { ItemCardModel } from '../item-card/item-card.model';\n\n@Component({\n  selector: 'app-item-details',\n  templateUrl: './item-details.component.html',\n  styleUrls: ['./item-details.component.scss']\n})\nexport class ItemDetailsComponent implements OnInit {\n\n  @Input()\n  item: ItemCardModel = {\n    \"id\": 0,\n    \"name\": \"Gorgeous Soft Computer\",\n    \"description\": \"Andy shoes are designed to keeping in mind durability as well as trends, the most stylish range of shoes & sandals\",\n    \"imgUrl\": \"http://placeimg.com/640/480/abstract\",\n    \"price\": \"795.00\",\n    \"cartView\": false\n  };\n\n  itemId: string;\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private commonDb: CommonDbService,\n    public locService: LocalServiceService,\n    private store: Store<CartState>\n  ) {\n\n  }\n\n  ngOnInit(): void {\n    this.itemId = this.route.snapshot.paramMap.get('id');\n    this.commonDb.getSpecificItem(this.itemId).subscribe((data: ItemCardModel) => {\n      this.item = data;\n    });\n  }\n\n  redirectToListing() {\n    this.router.navigateByUrl('home')\n  }\n\n  additemToCart() {\n    this.store.dispatch(AddToCart({item: this.item}));\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".item-details-container {\r\n  padding: 10px 30px 20px 30px;\r\n\r\n  .back-btn-container {\r\n    margin-bottom: 20px;\r\n\r\n    button {\r\n      font-size: 40px;\r\n      color: #333;\r\n      background: transparent;\r\n      border: none;\r\n      outline: none;\r\n      cursor: pointer;\r\n    }\r\n  }\r\n\r\n  .item-details {\r\n    display: grid;\r\n    grid-template-columns: 40% auto;\r\n    align-items: flex-start;\r\n    gap: 20px;\r\n    margin-bottom: 20px;\r\n\r\n    .item-img-container {\r\n      text-align: center;\r\n      padding: 10px;\r\n      border: 1px solid #333;\r\n\r\n      .item-img {\r\n        width: 100%;\r\n        max-width: 600px;\r\n      }\r\n    }\r\n\r\n    .item-description-container {\r\n      >*:not(:last-child) {\r\n        margin-bottom: 10px;\r\n      }\r\n\r\n      .item-title {\r\n        font-size: 22px;\r\n        font-weight: 700;\r\n      }\r\n\r\n      .item-price {\r\n        .price-label {\r\n          font-size: 18px;\r\n        }\r\n\r\n        .price-value {\r\n          font-size: 20px;\r\n          font-weight: 700;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  .action-buttons {\r\n    display: flex;\r\n    gap: 20px;\r\n    justify-content: center;\r\n\r\n    .action-btn {\r\n      outline: none;\r\n      border: none;\r\n      padding: 10px 20px;\r\n      background-color: #333;\r\n      color: white;\r\n      cursor: pointer;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./item-details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "commonDb",
                        "type": "CommonDbService"
                    },
                    {
                        "name": "locService",
                        "type": "LocalServiceService"
                    },
                    {
                        "name": "store",
                        "type": "Store<CartState>"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "commonDb",
                        "type": "CommonDbService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "locService",
                        "type": "LocalServiceService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<CartState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"item-details-container\">\n  <div class=\"back-btn-container\">\n    <button class=\"back-btn\" (click)=\"redirectToListing()\">←</button>\n  </div>\n  <div class=\"item-details\">\n    <div class=\"item-img-container\">\n      <img class=\"item-img\" src=\"{{ item.imgUrl }}\" alt=\"{{ item.name }}\" />\n    </div>\n    <div class=\"item-description-container\">\n      <div class=\"item-title\">\n        <span>{{ item.name }}</span>\n      </div>\n      <div *ngIf=\"!item.cartView\" class=\"item-description\">\n        <span>{{ item.description }}</span>\n      </div>\n      <div class=\"item-price\">\n        <span class=\"price-label\">Price: </span>\n        <span class=\"price-value\">{{ locService.getCurrencyText(item.price) }}</span>\n      </div>\n    </div>\n  </div>\n  <div class=\"action-buttons\">\n    <button (click)=\"additemToCart()\" class=\"action-btn\">Add to Cart</button>\n    <button class=\"action-btn\">Add to WishList</button>\n  </div>\n</div>\n"
        },
        {
            "name": "ItemListComponent",
            "id": "component-ItemListComponent-cd03839ad5afcc8beb01a891de157dc4",
            "file": "src/app/components/item/item-list/item-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-item-list",
            "styleUrls": [
                "./item-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./item-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "itemLists",
                    "defaultValue": "[]",
                    "type": "ItemCardModel[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { CommonDbService } from 'src/app/services/common-db.service';\r\nimport { ItemCardModel } from '../item-card/item-card.model';\r\n\r\n@Component({\r\n  selector: 'app-item-list',\r\n  templateUrl: './item-list.component.html',\r\n  styleUrls: ['./item-list.component.scss']\r\n})\r\nexport class ItemListComponent implements OnInit {\r\n\r\n  itemLists: ItemCardModel[] = [];\r\n\r\n  constructor(private commonDb: CommonDbService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.commonDb.getAllItems().subscribe((data: ItemCardModel[])=>{\r\n      this.itemLists = data;\r\n    });\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".item-card-list {\r\n  display: grid;\r\n  grid-template-columns: auto auto auto auto;\r\n  align-items: center;\r\n  gap: 50px;\r\n  padding: 20px 150px;\r\n\r\n  app-item-card {\r\n    display: grid;\r\n    height: 100%;\r\n  }\r\n\r\n}\r\n\r\n@media screen and (max-width: 1024px) {\r\n  .item-card-list {\r\n    grid-template-columns: auto auto auto;\r\n    padding: 20px 50px;\r\n  }\r\n}\r\n\r\n@media screen and (max-width: 768px) {\r\n  .item-card-list {\r\n    grid-template-columns: auto auto;\r\n  }\r\n}\r\n\r\n",
                    "styleUrl": "./item-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "commonDb",
                        "type": "CommonDbService"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "commonDb",
                        "type": "CommonDbService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"item-card-list\">\r\n    <app-item-card *ngFor=\"let item of itemLists\" [item]=\"item\"></app-item-card>\r\n</div>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "CartComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "ItemCardComponent"
                        },
                        {
                            "name": "ItemDetailsComponent"
                        },
                        {
                            "name": "ItemListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "$",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.component.ts",
                "type": "any"
            },
            {
                "name": "$",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/common/header/header.component.ts",
                "type": "any"
            },
            {
                "name": "AddToCart",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/common/cart/state/cart-action.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  CART_ACTIONS.ADD_TO_CART,\r\n  props<{ item: ItemCardModel }>()\r\n)"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/item-card.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "CartReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/common/cart/state/cart-reducer.ts",
                "type": "",
                "defaultValue": "createReducer(\r\n    initState,\r\n    on(AddToCart, (state, action: any) => {\r\n        return {...state, allItems: [...state.allItems, action.item]};\r\n    }),\r\n    on(DeleteItem, (state) => {\r\n        return state;\r\n    })\r\n)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "DeleteItem",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/common/cart/state/cart-action.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  CART_ACTIONS.GET_ITEMS,\r\n  props<{ id: number }>()\r\n)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: true\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: false\r\n}"
            },
            {
                "name": "initState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/common/cart/state/cart-reducer.ts",
                "type": "CartState",
                "defaultValue": "{\r\n    allItems: []\r\n}"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/item-card.stories.ts",
                "type": "Story<ItemCardComponent>",
                "defaultValue": "(args: ItemCardComponent) => ({\r\n  component: ItemCardComponent,\r\n  props: args,\r\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [
            {
                "name": "CART_ACTIONS",
                "childs": [
                    {
                        "name": "ADD_TO_CART",
                        "value": "[Add item] Add"
                    },
                    {
                        "name": "GET_ITEMS",
                        "value": "[Get item] Get"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/components/common/cart/state/cart-action.ts"
            }
        ],
        "groupedVariables": {
            "src/app/app.component.ts": [
                {
                    "name": "$",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.component.ts",
                    "type": "any"
                }
            ],
            "src/app/components/common/header/header.component.ts": [
                {
                    "name": "$",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/common/header/header.component.ts",
                    "type": "any"
                }
            ],
            "src/app/components/common/cart/state/cart-action.ts": [
                {
                    "name": "AddToCart",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/common/cart/state/cart-action.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  CART_ACTIONS.ADD_TO_CART,\r\n  props<{ item: ItemCardModel }>()\r\n)"
                },
                {
                    "name": "DeleteItem",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/common/cart/state/cart-action.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  CART_ACTIONS.GET_ITEMS,\r\n  props<{ id: number }>()\r\n)"
                }
            ],
            "src/stories/item-card.stories.ts": [
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/item-card.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/item-card.stories.ts",
                    "type": "Story<ItemCardComponent>",
                    "defaultValue": "(args: ItemCardComponent) => ({\r\n  component: ItemCardComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/components/common/cart/state/cart-reducer.ts": [
                {
                    "name": "CartReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/common/cart/state/cart-reducer.ts",
                    "type": "",
                    "defaultValue": "createReducer(\r\n    initState,\r\n    on(AddToCart, (state, action: any) => {\r\n        return {...state, allItems: [...state.allItems, action.item]};\r\n    }),\r\n    on(DeleteItem, (state) => {\r\n        return state;\r\n    })\r\n)"
                },
                {
                    "name": "initState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/common/cart/state/cart-reducer.ts",
                    "type": "CartState",
                    "defaultValue": "{\r\n    allItems: []\r\n}"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false\r\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/components/common/cart/state/cart-action.ts": [
                {
                    "name": "CART_ACTIONS",
                    "childs": [
                        {
                            "name": "ADD_TO_CART",
                            "value": "[Add item] Add"
                        },
                        {
                            "name": "GET_ITEMS",
                            "value": "[Get item] Get"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/components/common/cart/state/cart-action.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "pathMatch": "full",
                        "redirectTo": "home"
                    },
                    {
                        "path": "home",
                        "component": "ItemListComponent"
                    },
                    {
                        "path": "item/:id",
                        "component": "ItemDetailsComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "$",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/common/cart/cart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/common/cart/state/cart-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CartState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/common/cart/state/cart-action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AddToCart",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/common/cart/state/cart-action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DeleteItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/common/cart/state/cart-reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CartReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/common/cart/state/cart-reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/common/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/common/header/header.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "$",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/item/item-card/item-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItemCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/item/item-card/item-card.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ItemCardModel",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/item/item-details/item-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItemDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/item/item-list/item-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItemListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/elements/toggle-button/toggle-button.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ToggleButtonElement",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/cart.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CartService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/common-db.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CommonDbService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/local-service.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LocalServiceService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/item-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/item-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}